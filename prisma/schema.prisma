// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Tournaments   UsersInTournament[]
  wordleStats   WordleStats?
  quordleStats  QuordleStats?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WordleStats {
  id          String  @id @default(cuid())
  wins        Int     @default(0)
  losses      Int     @default(0)
  totalScore  Int     @default(0)
  user        User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String  @unique
}

model QuordleStats {
  id          String  @id @default(cuid())
  wins        Int     @default(0)
  losses      Int     @default(0)
  totalScore  Int     @default(0)
  user        User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String  @unique
}

model Tournaments {
  id          String  @id @default(cuid())
  name        String
  users       UsersInTournament[]
}

model UsersInTournament {
  user          User @relation(fields: [userId], references: [id])
  userId        String 
  tournament    Tournaments @relation(fields: [tournamentId], references: [id])
  tournamentId  String 
  guesses       Int
  @@id([userId, tournamentId])
}
